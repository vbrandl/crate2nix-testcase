# Generated by carnix 0.10.0: carnix generate-nix --standalone --src .
with import <nixpkgs> {};
with buildRustCrateHelpers;
let inherit (lib.lists) fold;
    inherit (lib.attrsets) recursiveUpdate;
  cratesIO = (callPackage ./crates-io.nix { });
in
rec {
  crates = cratesIO // rec {
# nix-test-0.1.0

    crates.nix_test."0.1.0" = deps: { features?(features_.nix_test."0.1.0" deps {}) }: buildRustCrate {
      crateName = "nix-test";
      version = "0.1.0";
      authors = [ "Valentin Brandl <vbrandl@riseup.net>" ];
      edition = "2018";
      src = exclude [ ".git" "target" ] ./.;
      dependencies = mapFeatures features ([
        (cratesIO.crates."flate2"."${deps."nix_test"."0.1.0"."flate2"}" deps)
      ]);
    };
    features_.nix_test."0.1.0" = deps: f: updateFeatures f (rec {
      flate2."${deps.nix_test."0.1.0".flate2}".default = true;
      nix_test."0.1.0".default = (f.nix_test."0.1.0".default or true);
    }) [
      (cratesIO.features_.flate2."${deps."nix_test"."0.1.0"."flate2"}" deps)
    ];


# end

  };

  nix_test = crates.crates.nix_test."0.1.0" deps;
  __all = [ (nix_test {}) ];
  deps.adler32."1.0.4" = {};
  deps.cfg_if."0.1.10" = {};
  deps.crc32fast."1.2.0" = {
    cfg_if = "0.1.10";
  };
  deps.flate2."1.0.12" = {
    cfg_if = "0.1.10";
    crc32fast = "1.2.0";
    libc = "0.2.65";
    miniz_oxide = "0.3.5";
  };
  deps.libc."0.2.65" = {};
  deps.miniz_oxide."0.3.5" = {
    adler32 = "1.0.4";
  };
  deps.nix_test."0.1.0" = {
    flate2 = "1.0.12";
  };
}
